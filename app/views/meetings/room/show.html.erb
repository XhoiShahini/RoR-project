<% content_for :body_attributes do %>
  data-turbo="false"
<% end %>
<div class="w-100 mx-auto my-2 px-4">
  <div>
    <h1 class="h3">
      <div class="flex justfy-start gap-4 items-center">
        <div>
          <%= link_to t('.meetings'), meetings_path %> > <%= link_to @meeting.title, @meeting %>
        </div>
        <% if @meeting_member.is_moderator? %>
          <div>
            <%= link_to t('.complete_meeting'), post_meeting_meeting_room_path(@meeting), class: "btn btn-small btn-danger rounded-full" %>
          </div>
        <% end %>
    </h1>
    <div class="hidden" data-controller="meetings--events" data-meetings--events-id-value="<%= @meeting.id %>">
    </div>
    <div class="grid grid-cols-12 gap-2">
      <div class="col-span-2 bg-white rounded shadow-md p-4">
        <h1 class="h3">
          <%= t('.documents') %>
        </h1>
        <%= turbo_frame_tag(
            "documents",
            src: tabs_meeting_documents_path(@meeting),
            data: {
              controller: "documents--tabs",
              documents__tabs_id_value: @meeting.id
            }
          ) %>

        <h1 class="h3">
          <%= t('.members') %>
        </h1>
        <%= turbo_frame_tag(
          "meeting_members",
          src: meeting_meeting_members_path(@meeting),
          data: {
            controller: "meeting-members--list",
            meeting_members__list_id_value: @meeting.id,
          }
        ) %>
      </div>
      <div class="col-span-7 bg-white rounded shadow-md">
        <div data-controller="documents--pdf" data-scale="1.25" id="pdf-controller" data-meeting-id="<%= @meeting.id %>">
          <div id="pdf-container" class="max-h-128 overflow-y-scroll overflow-auto">
            <div data-documents--pdf-target="progress" class="mx-auto p-10 hidden" style="height: 550px">
              <p class="text-lg">
                <%= t("loading") %>...
              </p>
              <div class="h-3 relative max-w-xl rounded-full overflow-hidden">
                  <div class="w-full h-full bg-gray-200 absolute"></div>
                  <div data-documents--pdf-target="bar" class="h-full bg-primary-500 relative w-0"></div>
              </div>
            </div>
            <p data-documents--pdf-target="placeholder" class="mx-auto p-10 text-gray-700">
              <%= t("documents.placeholder") %>
            </p>
            <canvas data-documents--pdf-target="canvas" class="hidden"></canvas>
          </div>
          <%= render "meetings/partials/document_controls" %>
        </div>
      </div>
      <div class="col-span-3 bg-white rounded shadow-md p-4">
        <p>
          <%= t('chrome') %>
        </p>
        <div class="w-100 rounded bg-white">
          <div id="localvideo" style="background-color: #000;">
            <video class="rounded centered" id="localVideo" width="100%" height="100%"  autoplay playsinline />
          </div>
          <div>
            <button type="button" id="displayControls" class="btn btn-small btn-primary mt-2"><%= t('video.show_options') %></button>
            <div class="card" style="display: none;" id="videoControls">
              <p><%= t('video.audio_input') %></p>
              <select id="audioInput"></select>
              <p><%= t('video.video_input') %></p>
              <select id="videoInput"></select>
              <button type="button" id="changeInput" class="btn btn-small btn-primary mt-2 mr-2"><%= t('video.change_input') %></button>
              <p><%= t('video.audio_output') %></p>
              <select id="audioOutput"></select>
              <button type="button" id="changeOutput" class="btn btn-small btn-primary mt-2 mr-2"><%= t('video.change_output') %></button>
            </div>
          </div>
          <div id="<%= @meeting_member.signed_member_id %>">
            <button type="button" class="btn btn-small btn-primary mt-1 mr-1" id="myAudio"><i class="fas fa-microphone"></i></button>
            <button type="button" class="btn btn-small btn-primary mt-1 mr-1" id="myVideo"><i class="fas fa-video"></i></button>
          </div>

          <div id="remotevideo" style="margin-top: 10px;">
          </div>
        </div>
      </div>
    </div>
  </div>
</div>



<script src="https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/7.4.0/adapter.min.js" ></script>
<script src="/js/janus.js"></script>
<script>
var server = "wss://<%= @meeting_member.server.domain %>/wsjanus";
const globalSubmitUrl = '<%= perform_action_meeting_room_path(@meeting_member.meeting) %>';
var janus = null;
var sfutest = null;
var opaqueId = "<%= @meeting_member.signed_member_id %>";
var memberId = "<%= @meeting_member.signed_member_id %>";
var username = "<%= @meeting_member.full_name %>";
var useAudio = true;
var myroom = "<%= @meeting_member.meeting.signed_room_id %>";
var roomId = "<%= @meeting_member.meeting.id %>";
var userToken = "<%= @meeting_member.janus_token %>";
var feeds = [];
var audioDeviceId = null;
var videoDeviceId = null;
var isModerator = <%= @meeting_member.is_moderator? %>;
var audioActive = true;
var videoActive = true;

function ready(callback) {
  if (document.readyState != 'loading' && typeof Janus !== "undefined") {
    callback();
  } else if (document.addEventListener) {
    document.addEventListener('janus:load', callback);
    document.addEventListener('DOMContentLoaded', callback);
  } else {
    document.attachEvent('onreadystatechange', function() {
      if (document.readyState != 'loading') {
        callback();
      }
    });
  }
}


//call this as the entry point

function joinRoom() {
  var register = {
    request: "join",
    room: myroom,
    ptype: "publisher",
    id: memberId,
    display: username,
    token: userToken
  };
  sfutest.send({ message: register });
}

function publishOwnFeed() {
	// Publish our stream
	sfutest.createOffer(
		{
			// Add data:true here if you want to publish datachannels as well
			media: { audioRecv: false, videoRecv: false, audioSend: true, videoSend: true, data: true },	// Publishers are sendonly
			success: function(jsep) {
				//Janus.log("Got publisher SDP!", jsep);
				var publish = { request: "configure", audio: true, video: true };
				sfutest.send({ message: publish, jsep: jsep });
			},
			error: function(error) {
				Janus.error("WebRTC error:", error);
			}
		});
}

function unpublishOwnFeed() {
	// Unpublish our stream
	var unpublish = { request: "unpublish" };
	sfutest.send({ message: unpublish });
}

function newRemoteFeed(id, display, audio, video, audio_moderated, video_moderated) {
	// A new feed has been published, create a new plugin handle and attach to it as a subscriber
	var remoteFeed = null;
	janus.attach(
		{
			plugin: "janus.plugin.videoroom",
			opaqueId: opaqueId,
			success: function(pluginHandle) {
				remoteFeed = pluginHandle;
				remoteFeed.simulcastStarted = false;
				//Janus.log("Plugin attached! (" + remoteFeed.getPlugin() + ", id=" + remoteFeed.getId() + ")");
				//Janus.log("  -- This is a subscriber");
				// We wait for the plugin to send us an offer
				var subscribe = {
					request: "join",
					room: myroom,
					ptype: "subscriber",
					feed: id,
					private_id: mypvtid
				};
				// In case you don't want to receive audio, video or data, even if the
				// publisher is sending them, set the 'offer_audio', 'offer_video' or
				// 'offer_data' properties to false (they're true by default), e.g.:
				// 		subscribe["offer_video"] = false;
				// For example, if the publisher is VP8 and this is Safari, let's avoid video
				if(Janus.webRTCAdapter.browserDetails.browser === "safari" &&
						(video === "vp9" || (video === "vp8" && !Janus.safariVp8))) {
					if(video)
						video = video.toUpperCase()
					toastr.warning("Publisher is using " + video + ", but Safari doesn't support it: disabling video");
					subscribe["offer_video"] = false;
				}
				remoteFeed.videoCodec = video;
				remoteFeed.send({ message: subscribe });
			},
			error: function(error) {
				Janus.error("  -- Error attaching plugin...", error);
				console.log("Error attaching plugin... " + error);
			},
      ondata: function(data) {
				console.log("Data received: ", data);
			},
			onmessage: function(msg, jsep) {
				// Janus.log(" ::: Got a message (subscriber) :::", msg);
				var event = msg["videoroom"];
				//Janus.log("Event: " + event);
				if(msg["error"]) {
					console.log(msg["error"]);
				} else if(event) {
					if(event === "attached") {
						remoteFeed.rfid = msg["id"];
						remoteFeed.rfdisplay = msg["display"];
            feeds[msg["id"]] = remoteFeed;
						//Janus.log("Successfully attached to feed " + remoteFeed.rfid + " (" + remoteFeed.rfdisplay + ") in room " + msg["room"]);
					} else {
						// What has just happened?
					}
				}
				if(jsep) {
					//Janus.log("Handling SDP as well...", jsep);
					// Answer and attach
					remoteFeed.createAnswer(
						{
							jsep: jsep,
							// Add data:true here if you want to subscribe to datachannels as well
							// (obviously only works if the publisher offered them in the first place)
							media: { audioSend: false, videoSend: false, data: true },	// We want recvonly audio/video
							success: function(jsep) {
								//Janus.log("Got SDP!", jsep);
								var body = { request: "start", room: myroom };
								remoteFeed.send({ message: body, jsep: jsep });
							},
							error: function(error) {
								Janus.error("WebRTC error:", error);
								console.log("WebRTC error... " + error.message);
							}
						});
				}
			},
			iceState: function(state) {
				//Janus.log("ICE state of this WebRTC PeerConnection (feed #" + remoteFeed.rfindex + ") changed to " + state);
			},
			webrtcState: function(on) {
				//Janus.log("Janus says this WebRTC PeerConnection (feed #" + remoteFeed.rfindex + ") is " + (on ? "up" : "down") + " now");
			},
			onlocalstream: function(stream) {
				// The subscriber stream is recvonly, we don't expect anything here
			},
			onremotestream: function(stream) {
				createNewStream(remoteFeed, stream)
        if (audio_moderated) {
          toggleAudioStream(remoteFeed.rfid, false);
        }
        if (video_moderated) {
          toggleVideoStream(remoteFeed.rfid, false);
        }
			},
			oncleanup: function() {
				//Janus.log(" ::: Got a cleanup notification (remote feed " + id + ") :::");
			}
		});
}

function createNewStream(remoteFeed, stream) {
  //Janus.log("Remote feed #" + remoteFeed.rfindex + " id "+ remoteFeed.rfid + ", stream:", stream);
  var existingElement = document.getElementById(remoteFeed.rfid);
  if (existingElement) {
    console.log("Adding stream", remoteFeed, stream);
    return;
  }

  var videoFrame = document.createElement('div');
  videoFrame.classList.add("videoFrame");
  videoFrame.id = remoteFeed.rfid;

  var placeholder = document.createElement('div');
  placeholder.classList.add("videoPlaceholder");
  var icon = document.createElement('i');
  icon.className = "fas fa-video-slash";
  placeholder.appendChild(icon);
  videoFrame.appendChild(placeholder);

  var banner = document.createElement('div');
  banner.className = "videoBanner";
  banner.innerText = remoteFeed.rfdisplay;
  videoFrame.appendChild(banner);

  var videoMuted = document.createElement('div');
  videoMuted.classList.add("videoMuted");
  var icon = document.createElement('i');
  icon.className = "fas fa-microphone-slash";
  videoMuted.appendChild(icon);
  videoFrame.appendChild(videoMuted);

  var videoElm = document.createElement('video');
  videoElm.autoplay = true;
  videoElm.playsInline = true;
  videoFrame.appendChild(videoElm);

  document.getElementById('remotevideo').appendChild(videoFrame)
	Janus.attachMediaStream(videoElm, stream);
}

function handlePresence(data) {
  console.log('presence', data);

  if (typeof data.video !== "undefined") {
    toggleVideoStream(data.id, data.video)
  }

  if (typeof data.audio !== "undefined") {
    toggleAudioStream(data.id, data.audio)
  }
}

function toggleVideoStream(id, visible) {
  var elm = document.getElementById(id);
  if (!elm) { return }

  var vid = elm.querySelector('video');
  var ph = elm.querySelector('.videoPlaceholder')

  if (visible) {
    vid.style.display = "block";
    ph.style.display = "none";
  } else {
    vid.style.display = "none";
    ph.style.display = "block";
  }
}

function toggleAudioStream(id, visible) {
  var elm = document.getElementById(id);
  if (!elm) { return }
  var ph = elm.querySelector('.videoMuted')

  if (visible) {
    ph.style.display = "none";
  } else {
    ph.style.display = "block";
  }
}

function toggleVideo(e) {
  var btn = document.getElementById('myVideo');
  var icon = btn.querySelector('i');
  var elm = document.getElementById('localVideo');

  if (videoActive) {
    // muting
    videoActive = false;
    icon.classList.remove('fa-video');
    icon.classList.add('fa-video-slash');
    elm.style.opacity = 0.2;
  } else {
    // unmuting
    videoActive = true;
    icon.classList.remove('fa-video-slash');
    icon.classList.add('fa-video');
    elm.style.opacity = 1;
  }

  console.log('Video is now: ', videoActive);

  formSubmit({
    member_id: memberId,
    command: 'toggle_video',
    value: videoActive
  })
}

function toggleAudio(e) {
  var btn = document.getElementById('myAudio');
  var icon = btn.querySelector('i');

  if (audioActive) {
    // muting
    audioActive = false;
    icon.classList.remove('fa-microphone');
    icon.classList.add('fa-microphone-slash');
  } else {
    // unmuting
    audioActive = true;
    icon.classList.remove('fa-microphone-slash');
    icon.classList.add('fa-microphone');
  }

  console.log('Audio is now: ', audioActive);

  formSubmit({
    member_id: memberId,
    command: 'toggle_audio',
    value: audioActive
  })
}

function formSubmit(body) {
  var token = document.getElementsByName('csrf-token')[0].content
  var formData = new FormData();
  for (const [key, value] of Object.entries(body)) {
    formData.append(key, value)
  }

  fetch(globalSubmitUrl, {
    body: formData,
    method: "post"
  })
  return false;
}

function destroyRemoteFeed(remoteFeedId) {
  var remoteFeed = feeds[remoteFeedId];

  if (remoteFeed) {
    feeds[remoteFeedId] = null;
    console.log("Removing stream", remoteFeed.rfid);
    remoteFeed.detach();
    var existingElement = document.getElementById(remoteFeedId);
    if (existingElement) {
      existingElement.remove();
    }
  }
  
}

function initDevices(devices) {
  var audioInput = document.getElementById('audioInput');
  audioInput.options.length = 0;
  var videoInput = document.getElementById('videoInput');
  videoInput.options.length = 0;
  var audioOutput = document.getElementById('audioOutput');
  audioOutput.options.length = 0;

	devices.forEach(function(device) {
		var label = device.label;
		if (!label || label === "") {
			label = device.deviceId;
    }
		if (device.kind === 'audioinput') {
      addOptionToSelect(audioInput, label, device.deviceId)
		} else if (device.kind === 'videoinput') {
      addOptionToSelect(videoInput, label, device.deviceId)
		} else if (device.kind === 'audiooutput') {
      addOptionToSelect(audioOutput, label, device.deviceId)
    }
  });

  audioDeviceId = audioInput.value;
  videoDeviceId = videoInput.value;
}

function addOptionToSelect(select, label, value) {
  var option = document.createElement('option');
  option.innerText = label;
  option.value = value;

  select.appendChild(option)
}

function restartCapture() {
	// Negotiate WebRTC
	var body = { audio: true, video: true };

	sfutest.send({ message: body });

	var replaceAudio = document.getElementById('audioInput').value !== audioDeviceId;
	audioDeviceId = document.getElementById('audioInput').value;
	var replaceVideo = document.getElementById('videoInput').value !== videoDeviceId;
	videoDeviceId = document.getElementById('videoInput').value;
	sfutest.createOffer(
		{
			// We provide a specific device ID for both audio and video
			media: {
				audio: {
					deviceId: {
						exact: audioDeviceId
					}
				},
				replaceAudio: replaceAudio,	// This is only needed in case of a renegotiation
				video: {
					deviceId: {
						exact: videoDeviceId
					}
				},
				replaceVideo: replaceVideo,	// This is only needed in case of a renegotiation
				data: true	// Let's negotiate data channels as well
			},

			success: function(jsep) {

				// sfutest.send({ message: body, jsep: jsep });
			},
			error: function(error) {
				console.log(error);
			}
		});
}

ready(async function() {
  document.getElementById('changeInput').onclick = function () {
    restartCapture();
  }

  document.getElementById('myVideo').addEventListener('click', function(e){
    toggleVideo(e);
  });

  document.getElementById('displayControls').addEventListener('click', function(e){
    if (document.getElementById('videoControls').style.display == "none") {
      e.target.innerText = "<%= t('video.hide_options') %>";
      document.getElementById('videoControls').style.display = "block";
    } else {
      e.target.innerText = "<%= t('video.show_options') %>";
      document.getElementById('videoControls').style.display = "none";
    }
  });

  document.getElementById('myAudio').addEventListener('click', function(e){
    toggleAudio(e);
  });

  document.getElementById('changeOutput').onclick = function () {
    var deviceId = document.getElementById("audioOutput").value;

    for (var key in feeds) {
      console.log(feeds[key])
      var elm = document.getElementById(feeds[key].rfid);
      if (elm) {
        var vid = elm.querySelector('video');
        if (vid && vid.setSinkId) {
          vid.setSinkId(deviceId).then(function() {
							console.log('Audio output device attached:', deviceId);
          });
        }
      }
    }
  }

  Janus.init({debug: false, callback: function() {
    if(!Janus.isWebrtcSupported()) {
      console.log("No WebRTC support... ");
      return;
    }

    janus = new Janus(
      {
        server: server,
        token: userToken,
        success: function() {
          // Attach to VideoRoom plugin
          janus.attach(
            {
              plugin: "janus.plugin.videoroom",
              opaqueId: opaqueId,
              success: function(pluginHandle) {
                sfutest = pluginHandle;
                //Janus.log("Plugin attached! (" + sfutest.getPlugin() + ", id=" + sfutest.getId() + ")");
                // set up devices
                Janus.listDevices(initDevices);
                joinRoom();
              },
              error: function(error) {
                Janus.error("  -- Error attaching plugin...", error);
                console.log("Error attaching plugin... " + error);
              },
              consentDialog: function(on) {
                
              },
              iceState: function(state) {
                //Janus.log("ICE state changed to " + state);
              },
              mediaState: function(medium, on) {
                //Janus.log("Janus " + (on ? "started" : "stopped") + " receiving our " + medium);
              },
              webrtcState: function(on) {
                //Janus.log("Janus says our WebRTC PeerConnection is " + (on ? "up" : "down") + " now");
              },
              onmessage: function(msg, jsep) {
                //Janus.log(" ::: Got a message (publisher) :::", msg);
                var event = msg["videoroom"];
                //Janus.log("Event: " + event);
                if(event) {
                  if(event === "joined") {
                    // Publisher/manager created, negotiate WebRTC and attach to existing , if any
                    myid = msg["id"];
                    mypvtid = msg["private_id"];
                    //Janus.log("Successfully joined room " + msg["room"] + " with ID " + myid);
                    publishOwnFeed();
                    // Any new feed to attach to?
                    if(msg["publishers"]) {
                      var list = msg["publishers"];
                      console.log("Got a list of available publishers/fds:", list);
                      for(var f in list) {
                        var id = list[f]["id"];
                        var display = list[f]["display"];
                        var audio = list[f]["audio_codec"];
                        var video = list[f]["video_codec"];
                        var audio_moderated = list[f]["audio_moderated"];
                        var video_moderated = list[f]["video_moderated"];
                        //Janus.log("  >> [" + id + "] " + display + " (audio: " + audio + ", video: " + video + ")");
                        newRemoteFeed(id, display, audio, video, audio_moderated, video_moderated);
                      }
                    }
                  } else if(event === "destroyed") {
                    // The room has been destroyed
                    Janus.warn("The room has been destroyed!");
                      window.location.reload();
                  } else if(event === "event") {
                    // Any new feed to attach to?
                    if(msg["publishers"]) {
                      var list = msg["publishers"];
                      console.log("Got a list of available publishers/feeds:", list);
                      for(var f in list) {
                        var id = list[f]["id"];
                        var display = list[f]["display"];
                        var audio = list[f]["audio_codec"];
                        var video = list[f]["video_codec"];
                        var audio_moderated = list[f]["audio_moderated"];
                        var video_moderated = list[f]["video_moderated"];
                        //Janus.log("  >> [" + id + "] " + display + " (audio: " + audio + ", video: " + video + ")");
                        newRemoteFeed(id, display, audio, video, audio_moderated, video_moderated);
                      }
                    } else if(msg["leaving"]) {
                      // One of the publishers has gone away?
                      destroyRemoteFeed(msg["leaving"])
                    } else if(msg["unpublished"]) {
                      destroyRemoteFeed(msg["unpublished"])
                    } else if(msg["error"]) {
                      if(msg["error_code"] === 426) {
                        // This is a "no such room" error: give a more meaningful description
                        console.log("room " + myroom + " does not exist...");
                      } else {
                        console.log(msg["error"]);
                      }
                    }
                  }
                }
                if(jsep) {
                  //Janus.log("Handling SDP as well...", jsep);
                  sfutest.handleRemoteJsep({ jsep: jsep });
                  // Check if any of the media we wanted to publish has
                  // been rejected (e.g., wrong or unsupported codec)
                  var audio = msg["audio_codec"];
                  if(mystream && mystream.getAudioTracks() && mystream.getAudioTracks().length > 0 && !audio) {
                    // Audio has been rejected
                    console.log("Our audio stream has been rejected, viewers won't hear us");
                  }
                  var video = msg["video_codec"];
                  if(mystream && mystream.getVideoTracks() && mystream.getVideoTracks().length > 0 && !video) {
                    // Video has been rejected
                    console.log("Our video stream has been rejected, viewers won't see us");
                  }
                }
              },
              onlocalstream: function(stream) {
                //Janus.log(" ::: Got a local stream :::", stream);
                mystream = stream;
                Janus.attachMediaStream(document.getElementById('localVideo'), stream);
                document.getElementById("localVideo").muted = "muted";
                if(sfutest.webrtcStuff.pc.iceConnectionState !== "completed" &&
                    sfutest.webrtcStuff.pc.iceConnectionState !== "connected") {
                  console.log("Publishing started");
                }
                var videoTracks = stream.getVideoTracks();
                if(!videoTracks || videoTracks.length === 0) {
                  // No webcam
                  console.log("no webcam")
                } else {
                  console.log("we have a webcam")
                }
              },
              onremotestream: function(stream) {
                // The publisher stream is sendonly, we don't expect anything here
              },
              oncleanup: function() {
                //Janus.log(" ::: Got a cleanup notification: we are unpublished now :::");
                mystream = null;
              }
            });
        },
        error: function(error) {
          Janus.error(error);
          console.log('FATAL ERROR', error)
          // window.location.reload();
        },
        destroyed: function() {
          window.location.reload();
        }
      });
  }});
});
</script>