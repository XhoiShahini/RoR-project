<% content_for :body_attributes do %>
  data-turbo="false"
<% end %>
<div class="w-100 mx-auto my-2 px-4">
  <div>
    <h1 class="h3">
      <div class="flex justfy-start gap-4 items-center">
        <div>
          <%= link_to t('.meetings'), meetings_path %> > <%= link_to @meeting.title, @meeting %>
        </div>
        <% if @meeting_member.is_moderator? %>
          <div>
            <%= link_to t('.complete_meeting'), post_meeting_meeting_room_path(@meeting), class: "btn btn-small btn-danger rounded-full", data: { confirm: t(".complete_meeting_warning") } %>
          </div>
        <% end %>
    </h1>
    <div class="hidden" data-controller="meetings--events" data-meetings--events-id-value="<%= @meeting.id %>">
    </div>
    <div class="grid grid-cols-12 gap-2">
      <div class="col-span-2 bg-white rounded shadow-md p-4">
        <h1 class="h3">
          <%= t('.documents') %>
        </h1>
        <%= turbo_frame_tag(
            "documents",
            src: tabs_meeting_documents_path(@meeting),
            data: {
              controller: "documents--tabs",
              documents__tabs_id_value: @meeting.id
            }
          ) %>

        <h1 class="h3">
          <%= t('.members') %>
        </h1>
        <%= turbo_frame_tag(
          "meeting_members",
          src: meeting_meeting_members_path(@meeting),
          data: {
            controller: "meeting-members--list",
            meeting_members__list_id_value: @meeting.id,
          }
        ) %>
      </div>
      <div class="col-span-7 bg-white rounded shadow-md">
        <div data-controller="documents--pdf" data-scale="1.25" id="pdf-controller" data-meeting-id="<%= @meeting.id %>">
          <div id="pdf-container" class="max-h-128 overflow-y-scroll overflow-auto">
            <div data-documents--pdf-target="progress" class="mx-auto p-10 hidden" style="height: 550px">
              <p class="text-lg">
                <%= t("loading") %>...
              </p>
              <div class="h-3 relative max-w-xl rounded-full overflow-hidden">
                  <div class="w-full h-full bg-gray-200 absolute"></div>
                  <div data-documents--pdf-target="bar" class="h-full bg-primary-500 relative w-0"></div>
              </div>
            </div>
            <p data-documents--pdf-target="placeholder" class="mx-auto p-10 text-gray-700">
              <%= t("documents.placeholder") %>
            </p>
            <canvas data-documents--pdf-target="canvas" class="hidden"></canvas>
          </div>
          <%= render "meetings/partials/document_controls" %>
        </div>
      </div>
      <div class="col-span-3 bg-white rounded shadow-md p-4">
        <p id="chromeOnly">
          <%= t('chrome') %>
        </p>
        <div class="w-100 rounded bg-white">
          <div id="videoRoot" style="width: 1px; height: 1px;"></div>
          <div id="localvideoframe" style="background-color: #000;">
            <video class="rounded centered" id="localVideo" width="100%" height="100%" muted  autoplay playsinline />
          </div>
          <div>
            <button type="button" id="displayControls" class="btn btn-small btn-primary mt-2"><%= t('video.show_options') %></button>
            <div class="card" style="display: none;" id="videoControls">
              <p><%= t('video.audio_input') %></p>
              <select id="audioinput"></select>
              <p><%= t('video.video_input') %></p>
              <select id="videoinput"></select>
              <button type="button" id="changeInput" class="btn btn-small btn-primary mt-2 mr-2"><%= t('video.change_input') %></button>
              <p><%= t('video.audio_output') %></p>
              <select id="audiooutput"></select>
              <button type="button" id="changeOutput" class="btn btn-small btn-primary mt-2 mr-2"><%= t('video.change_output') %></button>
            </div>
          </div>
          <div id="<%= @meeting_member.signed_member_id %>">
            <button type="button" class="btn btn-small btn-primary mt-1 mr-1" id="myAudioBtn"><i class="fas fa-microphone"></i></button>
            <button type="button" class="btn btn-small btn-primary mt-1 mr-1" id="myVideoBtn"><i class="fas fa-video"></i></button>
          </div>

          <div id="sfuWrapper" style="margin-top: 10px;">
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript" src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
<script src="https://unpkg.com/@signalwire/js@beta"></script>
<script>

var _swToken = "<%= @token %>";

var _memberNameMap = {
  <% @meeting.meeting_members.each do |mm| %>
  "<%= mm.signed_member_id %>": "<%= mm.full_name %>",
  <% end %>
};

function ready(callback) {
  if (document.readyState != 'loading' && typeof SignalWire !== "undefined") {
    callback();
  } else if (document.addEventListener) {
    document.addEventListener('DOMContentLoaded', callback);
  } else {
    document.attachEvent('onreadystatechange', function() {
      if (document.readyState != 'loading') {
        callback();
      }
    });
  }
}

let _currentRoom = null
let myMemberId = null;
const memberList = new Map();
var audioActive = true;
var videoActive = true;
var _currentWidth = null;

/**
 * Connect with Relay creating a client and attaching all the event handler.
 */
window.connect = () => {
  const sfuWrapper = document.getElementById('sfuWrapper')
  const canvasMap = new Map()
  let _allowCanvasDraw = true

  const _deleteCanvas = (member_id) => {
    // destroy canvas and context2d
    let { canvasEl, canvasCtx } = canvasMap.get(member_id)
    canvasCtx = undefined
    canvasEl.parentNode.removeChild(canvasEl)
    canvasMap.delete(member_id)

    var wrapper = document.getElementById('wrapcanvas_' + member_id);
    wrapper.parentNode.removeChild(wrapper);
  }

  const _stopDrawingCanvas = function () {
    _allowCanvasDraw = false
    for (const member_id of canvasMap.keys()) {
      _deleteCanvas(member_id)
    }
  }
  const _startDrawingCanvas = function () {
    const _mcu = document.querySelector('#videoRoot video')
    function updateCanvas() {
      canvasMap.forEach((mapValue) => {
        const { canvasEl, canvasCtx, x, y, width, height } = mapValue
        // calculate size of slice
        // _mcu.videoWidth _mcu.videoHeight
        var computedWidth = _mcu.videoWidth * width / 100;
        var computedHeight = _mcu.videoHeight * height / 100;
        var computedX = _mcu.videoWidth * x / 100;
        var computedY = _mcu.videoHeight * y / 100;

        var realWidth = _currentWidth;
        var realHeight = Math.round((_currentWidth / computedWidth) * computedHeight)

        canvasEl.width = realWidth;
        canvasEl.height = realHeight;
        canvasCtx.drawImage(_mcu, computedX, computedY, computedWidth, computedHeight, 0, 0, realWidth, realHeight)
        canvasCtx.restore()
      })
      if (_allowCanvasDraw) {
        setTimeout(function () {
          requestAnimationFrame(updateCanvas)
        }, 1000 / 15)
      }
    }
    updateCanvas()
  }

  const _createCanvasWrapper = function(member_id, canvasEl) {
    canvasEl.style.width = '100%'

    var wrapperId = 'wrapcanvas_' + member_id;
    var videoFrame = document.createElement('div');
    videoFrame.classList.add("videoFrame");
    videoFrame.id = wrapperId;

    var memberInfo = memberList.get(member_id);
    var memberName = _memberNameMap[memberInfo.name];

    var banner = document.createElement('div');
    banner.className = "videoBanner";
    banner.innerText = memberName;
    videoFrame.appendChild(banner);

    var videoMuted = document.createElement('div');
    videoMuted.classList.add("videoMuted");
    var icon = document.createElement('i');
    icon.className = "fas fa-microphone-slash";
    videoMuted.appendChild(icon);
    videoFrame.appendChild(videoMuted);

    videoFrame.appendChild(canvasEl)
    sfuWrapper.appendChild(videoFrame);

    toggleAudioMuteDisplay(memberInfo.id, memberInfo.audio_muted);
  }

  SignalWire.Video.createRoomObject({
    token: _swToken,
    rootElementId: 'videoRoot',
    audio: true,
    video: true,
  }).then((roomObject) => {
    _currentRoom = roomObject
    
    console.log('Video SDK _currentRoom', _currentRoom)

    _currentRoom.on('room.started', (params) =>
      console.log('>> DEMO room.started', params)
    )

    _currentRoom.on('room.joined', async (params) => {
      console.log('>> DEMO room.joined', params)
      myMemberId = params.member_id;
      _startDrawingCanvas();

      const video = document.getElementById('localVideo')
      video.srcObject = _currentRoom.localStream

      params.room.members.forEach((member) => {
        memberList.set(member.id, member);
        toggleAudioMuteDisplay(member.id, member.audio_muted);
      });
    })

    _currentRoom.on('room.updated', (params) =>
      console.log('>> DEMO room.updated', params)
    )
    _currentRoom.on('room.ended', (params) => {
      console.log('>> DEMO room.ended', params)
      hangup()
    })
    _currentRoom.on('member.joined', (params) => {
      console.log('>> DEMO member.joined', params);
      memberList.set(params.member.id, params.member);
      toggleAudioMuteDisplay(params.member.id, params.member.audio_muted);
    })
    _currentRoom.on('member.updated', (params) =>
      console.log('>> DEMO global member.updated', params)
    )

    _currentRoom.on('member.updated.audio_muted', (params) => {
      console.log('>> DEMO member.updated.audio_muted', params);
      toggleAudioMuteDisplay(params.member.id, params.member.audio_muted);
    })

    _currentRoom.on('member.updated.video_muted', (params) =>
      console.log('>> DEMO member.updated.video_muted', params)
    )

    _currentRoom.on('member.left', (params) => {
      memberList.delete(params.member.id);
      console.log('>> DEMO member.left', params);
    })
    _currentRoom.on('layout.changed', (params) => {
      console.log('>> DEMO layout.changed', params)

      const { layout } = params

      const validmember_ids = []
      layout.layers.forEach(({ member_id, x, y, width, height }) => {
        if (member_id && member_id != myMemberId) {
          validmember_ids.push(member_id)
          if (!canvasMap.has(member_id)) {
            // build canvas and context2d
            const canvasEl = document.createElement('canvas')
            canvasEl.id = 'canvas_' + member_id
            _createCanvasWrapper(member_id, canvasEl);
            const canvasCtx = canvasEl.getContext('2d', { alpha: false })
            canvasMap.set(member_id, {
              member_id,
              canvasEl,
              canvasCtx,
              x,
              y,
              width,
              height,
            })
          } else {
            canvasMap.set(member_id, {
              ...canvasMap.get(member_id),
              x,
              y,
              width,
              height,
            })
          }
        }
      })

      Array.from(canvasMap.keys()).forEach((member_id) => {
        if (!validmember_ids.includes(member_id)) {
          _deleteCanvas(member_id)
        }
      })
      
    })
    _currentRoom.on('track', (event) => console.log('>> DEMO track', event))
    _currentRoom.on('destroy', () => {
      _stopDrawingCanvas()
    })

    _currentRoom
      .join()
      .then((result) => {
        console.log('>> Room Joined', result)
      })
      .catch((error) => {
        console.error('Join error?', error)
      })
  })
}

/**
 * Hangup the _currentRoom if present
 */
window.hangup = () => {
  if (_currentRoom) {
    _currentRoom.hangup()
  }
}


// jQuery document.ready equivalent
window.ready = (callback) => {
  if (document.readyState != 'loading') {
    callback()
  } else if (document.addEventListener) {
    document.addEventListener('DOMContentLoaded', callback)
  } else {
    document.attachEvent('onreadystatechange', function () {
      if (document.readyState != 'loading') {
        callback()
      }
    })
  }
}

window.muteSelf = () => {
  _currentRoom.audioMute(_currentRoom.member_id)
}

window.unmuteSelf = () => {
  _currentRoom.audioUnmute(_currentRoom.member_id)
}

window.muteVideoSelf = () => {
  _currentRoom.videoMute(_currentRoom.member_id)
}

window.unmuteVideoSelf = () => {
  _currentRoom.videoUnmute(_currentRoom.member_id)
}

function toggleVideo(e) {
  var btn = document.getElementById('myVideoBtn');
  var icon = btn.querySelector('i');

  if (videoActive) {
    // muting
    videoActive = false;
    icon.classList.remove('fa-video');
    icon.classList.add('fa-video-slash');
    muteVideoSelf();
  } else {
    // unmuting
    videoActive = true;
    icon.classList.remove('fa-video-slash');
    icon.classList.add('fa-video');
    unmuteVideoSelf();
  }

  console.log('Video is now: ', videoActive);
}

function toggleAudio(e) {
  console.log('mute unmute', audioActive)
  var btn = document.getElementById('myAudioBtn');
  var icon = btn.querySelector('i');

  if (audioActive) {
    // muting
    audioActive = false;
    icon.classList.remove('fa-microphone');
    icon.classList.add('fa-microphone-slash');
    muteSelf();
  } else {
    // unmuting
    audioActive = true;
    icon.classList.remove('fa-microphone-slash');
    icon.classList.add('fa-microphone');
    unmuteSelf();
  }

  console.log('Audio is now: ', audioActive);
}

function toggleAudioMuteDisplay(id, is_muted) {
  var wrapper = document.getElementById('wrapcanvas_' + id);
  if (wrapper) {
    var ph = wrapper.querySelector('.videoMuted');
    if (is_muted) {
      ph.style.display = "block";
    } else {
      ph.style.display = "none";
    }
  }
}

async function listDevices() {
  var devices = await SignalWire.WebRTC.getDevicesWithPermissions();
  devices.forEach((device) => {
    var opt = document.createElement('option');
    opt.value = device.deviceId;
    opt.innerHTML = device.label;
    document.getElementById(device.kind).appendChild(opt);
  });
}

function setInput() {
  var audioInput = document.getElementById('audioinput').value;
  _currentRoom.updateMicrophone({ deviceId: audioInput });
  var videoInput = document.getElementById('videoinput').value;
  _currentRoom.updateCamera({ deviceId: videoInput });
}

function setOutput() {
  var audioOutput = document.getElementById('audiooutput').value;
  _currentRoom.updateSpeaker({ deviceId: audioOutput });
}

window.ready(function () {
  connect();
  listDevices();
  _currentWidth = document.getElementById('chromeOnly').offsetWidth;

  document.getElementById('myVideoBtn').addEventListener('click', function(e){
    toggleVideo(e);
  });

  document.getElementById('myAudioBtn').addEventListener('click', function(e){
    toggleAudio(e);
  });

  document.getElementById('changeInput').addEventListener('click', function(e){
    setInput();
  });

  document.getElementById('changeOutput').addEventListener('click', function(e){
    setOutput();
  });

  document.getElementById('displayControls').addEventListener('click', function(e){
    if (document.getElementById('videoControls').style.display == "none") {
      e.target.innerText = "<%= t('video.hide_options') %>";
      document.getElementById('videoControls').style.display = "block";
    } else {
      e.target.innerText = "<%= t('video.show_options') %>";
      document.getElementById('videoControls').style.display = "none";
    }
  });
})

</script>